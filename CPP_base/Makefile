CC=g++
LIBDIR = build
CFLAGS = -std=c++17 -Wall -Wextra -Werror

.PHONY: all clean tests style

STYLE = clang-format --style=google --verbose

all: topic_3 topic_4_2 topic_4_3 topic_5_2 topic_5_3 topic_7_1 topic_7_2

# задание 1.1
# Составить программу расчета таблицы значений функции f(x) на интервале a<=x<=b в  n  равностоящих точках. 
# Границы интервала a,b и количество точек n ввести с клавиатуры. Результаты вывести на печать
# Найти сумму всех отрицательных значений функции f(x) в заданном интервале. f(x) = 4 * eps^(-0.5*x)*cos(pi*x)
topic_3: $(patsubst %.cc, %.o, topic_3.cc)
	@$(CC) $(CFLAGS) topic_3.o -o $@
	@rm -rf *.o

# задание 2.1
# Задан одномерный массив действительных чисел a[n]. 
# Определить: max(a1+ an, a2+ an-1, … , an/2+ a(n/2)+1)
# Составить программу по заданию, согласно варианту.
# Исходный массив заполнить с помощью генератора случайных чисел.
topic_4_2: $(patsubst %.cc, %.o, topic_4_2.cc)
	@$(CC) $(CFLAGS) topic_4_2.o -o $@
	@rm -rf *.o

# задание 2.2
# Ввести с клавиатуры целые числа и сформировать из них массив a[n][m]. 
# В каждой строке выбирается элемент с наибольшим значением, затем среди этих чисел выбирается наименьшее значение.
# Указать индексы элемента с найденным значением
topic_4_3: $(patsubst %.cc, %.o, topic_4_3.cc)
	@$(CC) $(CFLAGS) topic_4_3.o -o $@
	@rm -rf *.o

# задание 3.1
# Составить программу на языке С++ с использованием функций.
# Сформировать одномерный массива a[n].
# Элементы массива ввести с клавиатуры. Обнулить все положительные элементы массива. 
# Преобразованный массив вывести на экран.
topic_5_2: $(patsubst %.cc, %.o, topic_5_2.cc)
	@$(CC) $(CFLAGS) topic_5_2.o -o $@
	@rm -rf *.o

# задание 3.2
# Составить программу на языке С++ с использованием функций. Предусмотреть использование прототипов функций.
# Ввести с клавиатуры целые числа и сформировать из них массив a[n][m]. 
# Написать программу, позволяющую исключать из нее столбец, в котором расположен минимальный элемент.
topic_5_3: $(patsubst %.cc, %.o, topic_5_3.cc)
	@$(CC) $(CFLAGS) topic_5_3.o -o $@
	@rm -rf *.o

# задание 4.1
# Составить программу на языке С++ с использованием файлов последовательного доступа. 
# Результаты вывести на экран.
# Из введенных с клавиатуры действительных чисел создать файл последовательного доступа. 
# Подсчитать произведение компонент файла.
topic_7_1: $(patsubst %.cc, %.o, topic_7_1.cc)
	@$(CC) $(CFLAGS) topic_7_1.o -o $@
	@rm -rf *.o

# задание 4.2
# Составить программу на языке С++ с использованием файлов произвольного доступа.
# # Каждая компонента файла – это структура, элементы которой определяются заданием, указанным в варианте.
# Создать файл, содержащий информацию о некоторой фирме по прокату автомобилей.
# Каждая компонента содержит следующую информацию:
# —	модель автомобиля;
# —	стоимость проката одного дня;
# —	страховая стоимость автомобиля.
# По введенной модели определить наличие автомобиля и вывести на печать страховую стоимость данного автомобиля.
topic_7_2: $(patsubst %.cc, %.o, topic_7_2.cc)
	@$(CC) $(CFLAGS) topic_7_2.o -o $@
	@rm -rf *.o

# тест задания 1.1
test_3:
	@chmod +x test_3.sh
	@./test_3.sh

# тест задания 2.1
test_4_2: topic_4_2
	@./topic_4_2
	@./topic_4_2
	@./topic_4_2
	@./topic_4_2

# тест задания 2.2
test_4_3:
	@chmod +x test_4_3.sh
	@./test_4_3.sh

# тест задания 3.1
test_5_2:
	@chmod +x test_5_2.sh
	@./test_5_2.sh

# тест задания 3.2
test_5_3:
	@chmod +x test_5_3.sh
	@./test_5_3.sh

# тест задания 4.1
test_7_1:
	@chmod +x test_7_1.sh
	@./test_7_1.sh

clean:
	@rm -rf topic_3
	@rm -rf topic_4_2
	@rm -rf topic_4_3
	@rm -rf topic_5_2
	@rm -rf topic_5_3
	@rm -rf topic_7_1
	@rm -rf topic_7_2

is_style:
	$(STYLE) -n *.cc

style:
	$(STYLE) -i *.cc